<script>
socket.on('stats', function(message) {
    renderMemory(message);
   // renderCPU(message);
});


function renderMemory(message){
  const grapharea  = document.getElementById('memoryCanvas').getContext("2d");
   
const data = {
  datasets: [{
    label: 'Mem√≥ria em uso',
    data: message.memory.data,
    backgroundColor: '#9BD0F5',
    borderColor: '#36A2EB',
    color:'#000',
    fill: true,
    tension: 0.1
  }
  ]
};
const config = {
    type: 'line',
    data: data,
    options: {
        scales: {
             y:{
              max : message.memory.total
             },
         x: {
              type: 'timeseries',
            }

        }
    }
  }
   let chartStatus = Chart.getChart("memoryCanvas"); // <canvas> id
    if (chartStatus != undefined) {
      chartStatus.destroy();
    }
    var memoryCanvas = new Chart(grapharea, config);
}


function renderCPU(message){
  const grapharea  = document.getElementById('cpuCanvas');
   const data = {
  datasets: [{
    label: 'Cpu em uso',
    data: message.cpu.data,
    backgroundColor: '#9BD0F5',
    borderColor: '#36A2EB',
    color:'#000',
    fill: true,
    tension: 0.1
  }
  ]
};
const config = {
    type: 'line',
    data: data,
    options: {
        scales: {
             y:{
              max : message.cpu.total
             },
         x: {
              type: 'timeseries',
            }

        }
    }
  }
   let chartStatus = Chart.getChart("cpuCanvas"); // <canvas> id
    if (chartStatus != undefined) {
      chartStatus.destroy();
    }
    var cpuCanvas = new Chart(grapharea, config);
}
</script>
  <canvas id="memoryCanvas"></canvas>
  <canvas id="cpuCanvas"></canvas>
